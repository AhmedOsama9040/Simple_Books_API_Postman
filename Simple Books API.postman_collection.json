{
	"info": {
		"_postman_id": "77949e05-32bb-42ff-b156-82c16a0e6f2f",
		"name": "Simple Books API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37771213"
	},
	"item": [
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check status field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"status"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the status. The response of this request is documented below as a JSON schema.\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "List of books (valid scenario)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Defined jsonData before using it in the test script\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"All response data has type fiction\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (i = 0; i < jsonData.length; i++) {\r",
							"        pm.expect(jsonData[i].type).to.eql(\"fiction\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Check limit\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books?type=fiction&limit=4",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						},
						{
							"key": "limit",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List of books (invalid scenario)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that error is a string type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books?type=crime",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "crime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check book Id\", function () {\r",
							"     var jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.id).to.eql(pm.variables.get(\"bookId\"));\r",
							"});\r",
							"\r",
							"\r",
							"                // Verify that API response contains all the expected fields\r",
							"\r",
							"pm.test(\"Check data contains id , name , author , type , price , current-stock , available\" , function () \r",
							"{\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.keys(\"id\",\"name\",\"author\",\"type\",\"price\",\"current-stock\",\"available\");\r",
							"});\r",
							"\r",
							"\r",
							"           // Verify that API response doesn't contain null value for each field.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check id field is not null\", function () {\r",
							"    pm.expect(jsonData.id).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check name field is not null\", function () {\r",
							"    pm.expect(jsonData.name).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check author field is not null\", function () {\r",
							"    pm.expect(jsonData.author).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check type field is not null\", function () { \r",
							"    pm.expect(jsonData.type).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check price field is not null\", function () {\r",
							"    pm.expect(jsonData.price).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check current-stock field is not null\", function () {\r",
							"    pm.expect(jsonData[\"current-stock\"]).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check available field is not null\", function () {\r",
							"    pm.expect(jsonData.available).not.eql(null); \r",
							"});\r",
							"\r",
							"\r",
							"         // Verify that API response contains the correct data type in each field\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check data type of id is number\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"});\r",
							"    \r",
							"pm.test(\"Check data type of name is a string\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of author is string\", function () {\r",
							"    pm.expect(jsonData.author).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of type is string\", function () {\r",
							"    pm.expect(jsonData.type).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of price is number\", function () {\r",
							"    pm.expect(jsonData.price).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of current-stock is number\", function () {\r",
							"    pm.expect(jsonData[\"current-stock\"]).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of available is boolean\", function () {\r",
							"    pm.expect(jsonData.available).to.be.a('boolean');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set('bookId', 2);\r",
							"                 //key    value"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books/{{bookId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit an order without Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Missing Authorization header.\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"Ahmed\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "API Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\",jsonData.accessToken);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Ahmed\",\r\n   \"clientEmail\": \"mohamffgfggffedghhgg@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api-clients/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit an order with Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check created value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.created).to.eql(true);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"orderId\",jsonData.orderId);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 5,\r\n  \"customerName\": \"Ahmed\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check id value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get('orderId'));\r",
							"});\r",
							"\r",
							"\r",
							"                // Verify that API response contains all the expected fields\r",
							"\r",
							"pm.test(\"Check data contains id , bookId , customerName , createdBy , quantity , timestamp\" , function () \r",
							"{\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.keys(\"id\",\"bookId\",\"customerName\",\"createdBy\",\"quantity\",\"timestamp\");\r",
							"});\r",
							"\r",
							"\r",
							"            // Verify that API response doesn't contain null value for each field.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check id field is not null\", function () {\r",
							"    pm.expect(jsonData.id).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check bookId field is not null\", function () {\r",
							"    pm.expect(jsonData.bookId).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check customerName field is not null\", function () {\r",
							"    pm.expect(jsonData.customerName).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check createdBy field is not null\", function () { \r",
							"    pm.expect(jsonData.createdBy).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check quantity field is not null\", function () {\r",
							"    pm.expect(jsonData.quantity).not.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check timestamp field is not null\", function () {\r",
							"    pm.expect(jsonData.timestap).not.eql(null);\r",
							"});\r",
							"\r",
							"\r",
							"         // Verify that API response contains the correct data type in each field\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check data type of id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"    \r",
							"pm.test(\"Check data type of bookId is a number\", function () {\r",
							"    pm.expect(jsonData.bookId).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of customerName is string\", function () {\r",
							"    pm.expect(jsonData.customerName).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of createdBy is string\", function () {\r",
							"    pm.expect(jsonData.createdBy).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of quantity is number\", function () {\r",
							"    pm.expect(jsonData.quantity).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of timestamp is number\", function () {\r",
							"    pm.expect(jsonData.timestamp).to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders/:orderId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Osama\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders/:orderId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/orders/:orderId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	]
}